//КЛАССЫ И ОБЪЕКТЫ

#include "stdafx.h"
#include <iostream>
using namespace std;
/*
 1. СИНТАКСИС ОБЪЯВЛЕНИЯ КЛАССА
 class Имя_Класса
 {
		int hp; //число хп
		double speed; //скорость персонажа
		void heal(); //восстановление хп		
		void move(); //проигрывание анимации движения
}
Класс - фактические описания пользовательского типа данных

Объект - экземпляр класса, реализация в оперативной памяти
Свойство (property) - переменная в составе класса
Метод (method) - функция в составе класса

класс Оружие
int число оставшихся зарядов
int ёмкость магазина
double дальность
double начальная скорость
double вес
bool oprics
bool loaded

функция зарядка (число оставшихся зарядов -> min)
функция проиграть анимацию ()
функция выстрел (вес - 1 патрон, анимация выстрела, число оставшихся патронов)

*/
class vehicle //игровое транспортное средство
{
public:
	/*private:*/
	double speed;//скорость
	char regnumber[6] = { 0 };//госномер
	unsigned char capacity;//число пасажиров

	bool check_regnumber() //если зарегистрирован - true
	{
		//если метод небольшой - определение прямо в классе

		//если номер К370АО - возвращает true
		const char * true_number = "K370AO";
		bool result = true;
		for (int i = 0; i < 6; i++)
		{
			result = result && (true_number[i] == regnumber[i]);
			/*
			for (int i = 0; i < 6; i++)
			if (true_number[i] != regnumber[i] == regnumber[i]);
			*/
		}
		return result;

		//запустить цикл проверки по всем 6 символам строки regnumber
		//если все элементы совпадают с true_number - return true;
		
	}
	void add_passenger(int passengers);
	void accelerate(double delta_velocity);
	

};

/*
2. СИНТАКСИС ОБЪЯВЛЕНИЯ ОБЪЕКТА И ОБРАЩЕНИЕ К СВОЙСТВАМ И МЕТОДАМ
Имя_Класса объект1;

объект1.свойство1 = 1;
объект1.метод3();
*/
int main()
{

	vehicle vehicle_object;
	vehicle_object.regnumber[0] = 'К';
	vehicle_object.regnumber[0] = '3';
	vehicle_object.regnumber[0] = '7';
	vehicle_object.regnumber[0] = '1';
	vehicle_object.regnumber[0] = 'A';
	vehicle_object.regnumber[0] = 'O';
	bool check_result = vehicle_object.check_regnumber();
}

/*
3. СПЕЦИФИКАТОРЫ ДОСТУПА
К полям (свойствам и методам), объявленным в разделе public:
можно обращаться везде (и из методов класса, и снаружи, где виден объект)
К полям private и protected можно обращаться только из методов
самого класса. Различие между private и protected объясняется в следующей теме
про наследование классов

4. КОНСТРУКТОР И ДЕСТРУКТОР КЛАССА
В случае, если при создании объекта нужно выполнять сложные действия по
инициализации, установлению сетевого соединения, действия с файлами,
выделение ОП и т.д. это действия прописываются в специальном методе - конструкторе
Конструктор вызывается автоматически при создании объекта
В случае если при исчезновении объекта нужно обхие системные ресурсы освобождать:
закрывать порты, освобождать оперативку, сохранять файлы и т.д. - эти действия 
прописываются в методе - деструкторе (вызывается автоматически при исчезновении объекта)
*/