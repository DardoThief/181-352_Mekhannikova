#include <iostream>
/*ПЕРЕГРУЗКА ФУНКЦИЙ, МЕТОДОВ И ОПЕРАТОРОВ
Перегрузка (overloading)- объявление нескольких функций (а также методов классов и операторов
являются функциями) с одинаковыми именами, но различным набором аргументов.


1. Синтаксис. Просто объявление рядом нескольких функций с идентичнымы именами.
Входные параметры обязательно должны различаться.
Различные по выходному параметру не является перегрузкой.
Когда компилятор встречает в тексте программы вызов одной из перегруженных функций
он подставляет одну из них, ориентируясь на список переданных параметров, как на сигнатур
В отличие и Паскаль дополнительные служебные слова не требуются

2. Параметры использования
Математические функции для float и для double
Строковые методы для std::string и для char*
Перегрузка конструкторов (пустой и копирующий конструктор + другие типы)

3. Перегрузка операторов (+, -, * и тд)
Операторы в С++ являются функциями, и их можно перегружать
Унарные и бинарные операторы перегружаются по-разному (Солтер "С++ для профессионалов")
Унарные операторы перегружаются как метод пользовательского класса,
а бинарные - как отдельные функции



ДЗ: реализовать умножение матрицы на матрицу

*/

using namespace std;

class mat
{
public:
	mat() {};
	mat(const mat & p1) {};
	double data[3][3] = { 0 };
	size_t columns = 3;
	size_t rows = 3;
	mat & operator++()
	{
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j, rows; j++)
			{
				this->data[i][j]++;
			}
		}

		return (*this); //запись mat++ аналогична mat = (operator ++)(mat)
		//this указывает на вызвавший объект
	}
};

mat operator + (const mat & ihs, //left hand side
	const mat & fhs) // right hand side
{
	mat result; //создать новый объект для записи результатов
	//собственно, сложение элементов ihs и fhs в result
	return result;
}

int main()
{
	string str1;
	str1.at(1);

	string * str2;
	str2 = new string();
	str2->at(1);

	mat mat1, mat2, mat3;
	mat1.columns;
	//mat1.inc(); //увеличение на 1
	//mat++;

	mat3 = mat1 + mat2; //унарный оператор
	//mat3 = some_add_function(mat1, mat2); //бинарный оператор

	//string str1, str2, str3;
	//str1 = str2 + str3;
	
}